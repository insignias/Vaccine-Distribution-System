/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DistributorWarehouseRole;

import Business.EcoSystem;
import Business.Enterprise.DistributorWarehouseEnterprise;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DistributorWarehouseOrganization;
import Business.Organization.HospitalOrganization;
import Business.Organization.ManufacturerOrganization;
import Business.Organization.Organization;
import Business.Organization.PharmaceuticalOrganization;
import Business.Organization.ProviderOrganization;
import Business.Person.Person;
import Business.Person.Vaccine;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.InvoiceRequest;
import Business.WorkQueue.ShippingRequest;
import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author insignia
 */
public class DistributorWarehouseProcessShipmentRequestJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount account;
    private DistributorWarehouseEnterprise dwEnterprise;
    private DistributorWarehouseOrganization dwOrganization;
    private ShippingRequest request;
    private EcoSystem ecoSystem;
    private Calendar calendar;
    private Date d;
    public DistributorWarehouseProcessShipmentRequestJPanel(JPanel upc, UserAccount account, DistributorWarehouseEnterprise dwEnterprise, DistributorWarehouseOrganization dwOrganization, ShippingRequest request, EcoSystem ecoSystem) {
        initComponents();
        userProcessContainer = upc;
        this.account = account;
        this.dwEnterprise = dwEnterprise;
        this.dwOrganization = dwOrganization;
        this.request = request;
        this.ecoSystem = ecoSystem;
        calendar = Calendar.getInstance();
        d = calendar.getTime();
        
        resultjComboBox.removeAllItems();
        resultjComboBox.addItem("Ship");
        resultjComboBox.addItem("Do Not Ship");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        resultjComboBox = new javax.swing.JComboBox();
        shippingDatejDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        backJButton1 = new javax.swing.JButton();
        submitJButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("American Typewriter", 1, 18)); // NOI18N
        jLabel1.setText("DISTRIBUTOR WAREHOUSE PROCESS SHIPMENT REQUEST");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel3.setText("Ship To:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 49, -1, -1));

        resultjComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        resultjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultjComboBoxActionPerformed(evt);
            }
        });
        add(resultjComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 80, 133, -1));
        add(shippingDatejDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(119, 116, -1, -1));

        jLabel6.setText("Result:");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 87, -1, -1));

        backJButton1.setText("<< Back");
        backJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton1ActionPerformed(evt);
            }
        });
        add(backJButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 162, -1, -1));

        submitJButton.setText("Submit");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });
        add(submitJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 160, -1, -1));

        jLabel7.setText("Shipping date:");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 128, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void resultjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultjComboBoxActionPerformed

    }//GEN-LAST:event_resultjComboBoxActionPerformed

    private void backJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton1ActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButton1ActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed
        if(!request.getOrderResult().equals("Received")){
        String status = (String)resultjComboBox.getSelectedItem();
        if(status.equals("Ship")){
            request.setStatus("Completed");
//            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
//        
//                Date date = shippingDatejDateChooser.getDate();
//                String strDate = DateFormat.getDateInstance().format(date);
//                 System.out.println("calendar: " +d);
//                 System.out.println("date: " +date);
//                 if(date.after(d)){
//                     request.setProcessDate(strDate);
//                     request.setOrderResult("Received");
////                     JOptionPane.showMessageDialog(null, "Result submitted");
////                        return;
//                     }
//                 if(date.equals(d)){
//                     request.setProcessDate(strDate);
//                     request.setOrderResult("Received");
////                     JOptionPane.showMessageDialog(null, "Result submitted");
////                        return;
//                     }
//                 if(date.before(d))
//                 {
//                         JOptionPane.showMessageDialog(null, "Please select a valid date");
//                         return;
//                     }
            ShippingRequest shipRequest = new ShippingRequest();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        
                Date date = shippingDatejDateChooser.getDate();
                String strDate = null;
                if(date!=null){
                strDate = DateFormat.getDateInstance().format(date);
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Please Enter Date");
                }
                 System.out.println("calendar: " +d);
                 System.out.println("date: " +date);
                 if(!date.before(request.getResolveDate())){
                     request.setProcessDate(strDate);
                     request.setOrderResult("Received");
//                     JOptionPane.showMessageDialog(null, "Result submitted");
//                        return;
                     }
                 else
                     {
                         JOptionPane.showMessageDialog(null, "Shipping date cannot be before receiving date");
                         return;
                     }
                 if(date.equals(d)){
                     request.setProcessDate(strDate);
                     request.setOrderResult("Received");
//                     JOptionPane.showMessageDialog(null, "Result submitted");
//                        return;
                     }
                 if(date.before(d))
                 {
                         JOptionPane.showMessageDialog(null, "Please select a valid date");
                         return;
                     }
            shipRequest.setVaccineName(request.getVaccineName());
            shipRequest.setQuantity(request.getQuantity());
            shipRequest.setSender(account);
            shipRequest.setPrice(request.getPrice());
            shipRequest.setStatus("sent");
            shipRequest.setOrderResult("Waiting");
            shipRequest.setRequestID(request.getRequestID());
            shipRequest.setProcessDate(strDate);
            shipRequest.setEnterpriseType(request.getEnterpriseType());
            shipRequest.setEnterpriseName(request.getEnterpriseName());
            shipRequest.setLocation(request.getLocation());
            shipRequest.setManufactureDate(request.getManufactureDate());
            shipRequest.setExpiryDate(request.getExpiryDate());
            shipRequest.setManufacturer(request.getManufacturer());
            shipRequest.setProviderLocation(request.getProviderLocation());
            shipRequest.setProviderEnterpriseType(request.getProviderEnterpriseType());
            shipRequest.setProviderEnterpriseName(request.getProviderEnterpriseName());
            shipRequest.setLotNumber(request.getLotNumber());
            shipRequest.setResolveDate(date);
            
            InvoiceRequest invRequest = new InvoiceRequest();
            invRequest.setVaccineName(request.getVaccineName());
            invRequest.setQuantity(request.getQuantity());
            invRequest.setSender(account);
            invRequest.setPrice(request.getPrice());
            invRequest.setStatus("sent");
            invRequest.setPaymentStatus("Waiting");
            invRequest.setRequestID(request.getRequestID());
            invRequest.setProcessDate(strDate);
            invRequest.setEnterpriseType(request.getEnterpriseType());
            invRequest.setEnterpriseName(request.getEnterpriseName());
            invRequest.setLocation(request.getLocation());
            //invRequest.setManufactureDate(request.getManufactureDate());
            //invRequest.setExpiryDate(request.getExpiryDate());
            invRequest.setManufacturer(request.getManufacturer());
            invRequest.setProviderLocation(request.getProviderLocation());
            invRequest.setProviderEnterpriseType(request.getProviderEnterpriseType());
            invRequest.setProviderEnterpriseName(request.getProviderEnterpriseName());
            //invRequest.setLotNumber(request.getLotNumber());
//            ManufacturerOrganization manOrg = null;
//            for(Network network : ecoSystem.getNetworkList()){
//                for(Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()){
//                    for(Organization o : e.getOrganizationDirectory().getOrganizationList()){
//                        if(o instanceof ManufacturerOrganization){
//                            manOrg = (ManufacturerOrganization)o;
//                            for(Person p : manOrg.getPersonDirectory().getPersonList()){
//                            for(Vaccine v : p.getVaccineCatalog().getVaccineCatalog()){
//                                if(v.getVaccineName().equals(request.getVaccineName())){
//                                int newQuant = v.getQuantity() - request.getQuantity();
//                                v.setQuantity(newQuant);
//                               }
//                            }
//                        }
//                    }
//                }
//            }
//        } 
            
            Organization organization = null;
            for(Network network : ecoSystem.getNetworkList()){
                boolean check = false;
                for(Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList()){
                    if(request.getProviderLocation().equals(enterprise.getLocation())){
                        System.out.println("enterprise.getLocation(): " +enterprise.getLocation());
                        System.out.println("beforeif enterpriseType: " +enterprise.getEnterpriseType().getValue());
                        if(enterprise.getEnterpriseType().getValue().equals(request.getProviderEnterpriseType())){
                            System.out.println("e.getName: " +enterprise.getName());
                                System.out.println("request.getEnterpriseName: " +request.getEnterpriseName());
                            if(enterprise.getName().equals(request.getProviderEnterpriseName())){
                                for(Organization or : enterprise.getOrganizationDirectory().getOrganizationList()){
                                System.out.println("organization: " +or.getName());
                                    if(enterprise.getEnterpriseType().getValue().equals("Provider")){
                                        if(or instanceof ProviderOrganization){
                                        System.out.println("instance of Provider Organization");
                                        organization = or;
                                        check = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
                if(check==true)
                    {
                        break;
                    }
        }        
                    
            if(organization!=null){
                    organization.getWorkQueue().getWorkRequestList().add(invRequest);
                    
                    System.out.println("order request added to provider org");
                }                    

            Organization org = null;
            for(Network n : ecoSystem.getNetworkList()){
                boolean flag = false;
                for(Enterprise e: n.getEnterpriseDirectory().getEnterpriseList()){
                    if(request.getLocation().equals(e.getLocation())){
                        System.out.println("e.getLocation(): " +e.getLocation());
                        System.out.println("beforeif enterpriseType: " +e.getEnterpriseType().getValue());
                        if(e.getEnterpriseType().getValue().equals(request.getEnterpriseType())){
                            System.out.println("e.getName: " +e.getName());
                                System.out.println("request.getEnterpriseName: " +request.getEnterpriseName());
                            if(e.getName().equals(request.getEnterpriseName())){
                                for(Organization o : e.getOrganizationDirectory().getOrganizationList()){
                                System.out.println("organization: " +o.getName());
                                if(e.getEnterpriseType().getValue().equals("Hospital")){
                                if(o instanceof HospitalOrganization){
                                    System.out.println("instance of Hospital Organization");
                                    org = o;
                                    flag = true;
                                    break;
                                }
                              } 
                             
                                    if(e.getEnterpriseType().getValue().equals("Pharmaceutical")){
                                        if(o instanceof PharmaceuticalOrganization){
                                            System.out.println("instance of Pharmaceutical Organization");
                                            org = o;
                                            flag = true;
                                            break;
                                        }
                                    } 
                                }
                            } 
                        }
                    }
                }
                       
                    if(flag==true)
                    {
                        break;
                    }
                }
                if(org!=null){
                    org.getWorkQueue().getWorkRequestList().add(shipRequest);
                    account.getWorkQueue().getWorkRequestList().add(shipRequest);
                    System.out.println("order request added to org");
                }

                JOptionPane.showMessageDialog(null, "Result submitted");
                return;
                
            
        }

        if(status.equals("Do Not Ship")){
            shippingDatejDateChooser.setEnabled(false);
            request.setStatus("Completed");
            request.setOrderResult("Distributor Warehouse did not ship");
//            request.setSender(account);
//                        ShippingRequest shippingRequest = new ShippingRequest();
//                        shippingRequest.setOrderId(request.getOrderId());
//                        shippingRequest.setMessage(request.getMessage());
//                        shippingRequest.setSender(ua);
//                        shippingRequest.setStatus("Completed");
//            shippingRequest.setShippingResult("Cancelled");
//                        Organization org = null;
//                        for(Network n : ecoSystem.getNetworkList()){
//                            for(Enterprise e: n.getEnterpriseDirectory().getEnterpriseList()){
//                                    if(hospitalEnterprise.getLocation().equals(e.getLocation())){
//                                            if(e.getEnterpriseType().getValue().equals("Provider")){
//                                            for(Organization o : e.getOrganizationDirectory().getOrganizationList()){
//                                                    if(o instanceof ProviderOrganization){
//                                                            //System.out.println("instance of provider org");
//                                                            org = o;
//                                                            break;
//                                                        }
//                                                }
//                                        }
//                                    if(org!=null){
//                                            org.getWorkQueue().getWorkRequestList().add(request);
//                                            ua.getWorkQueue().getWorkRequestList().add(request);
//                                            System.out.println("order request added to Provider org");
//                                    }
                        
                        JOptionPane.showMessageDialog(null, "Result submitted");
                        return; 
                    }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Result already submitted");
            return;
        }

    }//GEN-LAST:event_submitJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JComboBox resultjComboBox;
    private com.toedter.calendar.JDateChooser shippingDatejDateChooser;
    private javax.swing.JButton submitJButton;
    // End of variables declaration//GEN-END:variables
}
