/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ClinicRole;

import Business.EcoSystem;
import Business.Enterprise.ClinicEnterprise;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.CDCOrganization;
import Business.Organization.ClinicOrganization;
import Business.Organization.DistributorWarehouseOrganization;
import Business.Organization.InsuranceOrganization;
import Business.Organization.Organization;
import Business.Person.Clinician;
import Business.Person.Person;
import Business.Person.Vaccine;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.InvoiceRequest;
import Business.WorkQueue.PatientRequest;
import Business.WorkQueue.PaymentRequest;
import java.awt.CardLayout;
import java.math.BigInteger;
import java.text.DateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author insignia
 */
public class ClinicPatientOrderRequestJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem ecoSystem;
    private ClinicOrganization clinicOrg;
    private UserAccount account; 
    private ClinicEnterprise clinicEnterprise;
    private Calendar calendar;
    private Date d;
    public ClinicPatientOrderRequestJPanel(JPanel upc,UserAccount account,ClinicEnterprise clinicEnterprise, ClinicOrganization clinicOrg,EcoSystem ecoSystem) {
        initComponents();
        userProcessContainer = upc;
        this.account = account;
        this.clinicEnterprise = clinicEnterprise;
        this.clinicOrg = clinicOrg;
        this.ecoSystem = ecoSystem;
        
        calendar = Calendar.getInstance();
        d = calendar.getTime();
        
        insuranceInfojComboBox.removeAllItems();
        insuranceInfojComboBox.addItem("Uninsured");
//        insuranceInfojComboBox.addItem("Under Insured");
        insuranceInfojComboBox.addItem("Insured");
        
        vaccineNamejComboBox.removeAllItems();
        for(Person p : clinicOrg.getPersonDirectory().getPersonList()){
          if(p instanceof Clinician){
              Clinician clinician = (Clinician)p;
              for(Vaccine v : clinician.getVaccineCatalog().getVaccineCatalog()){
                  vaccineNamejComboBox.addItem(v.getVaccineName());
                  pricePerDosejTextField.setText(String.valueOf(v.getPrice()));
              }
          }  
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        patientNamejTextField = new javax.swing.JTextField();
        patientAddressjTextField = new javax.swing.JTextField();
        patientContactjTextField = new javax.swing.JTextField();
        orderQuantityjTextField = new javax.swing.JTextField();
        submitjButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        insuranceInfojComboBox = new javax.swing.JComboBox();
        vaccineNamejComboBox = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        quantityAvailablejTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        pricePerDosejTextField = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("American Typewriter", 1, 18)); // NOI18N
        jLabel1.setText("CLINIC PATIENT ORDER REQUEST");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel2.setText("Patient Name:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 60, -1, -1));

        jLabel3.setText("Insurance Info:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 196, -1, -1));

        jLabel4.setText("Vaccine Name:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 249, 94, -1));

        jLabel5.setText("Order Quantity:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 342, -1, -1));

        jLabel6.setText("Patient Address:");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 106, -1, -1));

        jLabel7.setText("Patient Contact:");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 152, -1, -1));
        add(patientNamejTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 54, 125, -1));
        add(patientAddressjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 100, 125, -1));
        add(patientContactjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 146, 125, -1));

        orderQuantityjTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderQuantityjTextFieldActionPerformed(evt);
            }
        });
        add(orderQuantityjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 336, 123, -1));

        submitjButton.setText("Submit");
        submitjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitjButtonActionPerformed(evt);
            }
        });
        add(submitjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 430, -1, -1));

        backButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        backButton.setText("<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 430, -1, -1));

        insuranceInfojComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(insuranceInfojComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 192, 125, -1));

        vaccineNamejComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        vaccineNamejComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vaccineNamejComboBoxActionPerformed(evt);
            }
        });
        add(vaccineNamejComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 245, 125, -1));

        jLabel9.setText("Quantity Available:");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 296, -1, -1));

        quantityAvailablejTextField.setEnabled(false);
        add(quantityAvailablejTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 290, 123, -1));

        jLabel10.setText("Price/Dose:");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 388, -1, -1));

        pricePerDosejTextField.setEnabled(false);
        pricePerDosejTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pricePerDosejTextFieldActionPerformed(evt);
            }
        });
        add(pricePerDosejTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 382, 123, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed

    private void submitjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitjButtonActionPerformed
        String patientName;
        try
        {
        String regex = "[^&%$#@!0-9()~`.,]*";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(patientNamejTextField.getText());
        if (!matcher.matches()) 
        throw new Exception("Enter valid characters for Patient name");
        }
        catch (Exception e) {
        //System.err.println("Caught IOException: " + e.getMessage());
        JOptionPane.showMessageDialog(null,e.getMessage());
        return;
        }

        
        try
        {
        patientName = patientNamejTextField.getText();
        if ((patientNamejTextField.getText().startsWith(" ")) || (patientNamejTextField.getText().isEmpty()))
            throw new Exception(" Please enter valid characters for Patient Name ");
        }        
        catch (Exception e) {
        //System.err.println("Caught IOException: " + e.getMessage());
        JOptionPane.showMessageDialog(null,e.getMessage());
        return;
        }
        
        String patientAddress;
        try
        {
        patientAddress = patientAddressjTextField.getText();
        if ((patientAddressjTextField.getText().startsWith(" ")) || (patientAddressjTextField.getText().isEmpty()))
            throw new Exception(" Please enter valid characters for Patient Address ");
        }        
        catch (Exception e) {
        //System.err.println("Caught IOException: " + e.getMessage());
        JOptionPane.showMessageDialog(null,e.getMessage());
        return;
        }
        try
        {
        if(!(patientContactjTextField.getText().length() == 10 ))
        throw new Exception(" Please enter 10 digits number for contact ");
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null,e.getMessage() );
        return;
        }
        String patientContact;
//        try
//        {
            patientContact = patientContactjTextField.getText();
            
        try
        {
        String regex = "[0-9]*";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(patientContactjTextField.getText());
        if (!matcher.matches()) 
        throw new Exception("Enter valid phone");
        }
        catch (Exception e) {
        //System.err.println("Caught IOException: " + e.getMessage());
        JOptionPane.showMessageDialog(null,e.getMessage());
        return;
        }
//        }
//        catch (NumberFormatException e) {
//        
//        JOptionPane.showMessageDialog(null,"Please enter numeric value for Contact ");
//        return;
//        }
//        try
//        {
//        if (patientContact < 0)
//            throw new Exception(" Please enter digits only ");
//        }
//        catch (Exception e) {
//        
//        JOptionPane.showMessageDialog(null,e.getMessage() );
//        return;
//         }
        
        String insuranceInfo = (String)insuranceInfojComboBox.getSelectedItem();
        
        String vaccineName = (String)vaccineNamejComboBox.getSelectedItem();
        
        int orderQunatity;
        try
        {
            orderQunatity = Integer.parseInt(orderQuantityjTextField.getText());
        }
        catch (NumberFormatException e) {
        
        JOptionPane.showMessageDialog(null,"Please enter numeric value for Order Quantity ");
        return;
        }
        try
        {
        if (orderQunatity < 0)
            throw new Exception("Order Quantity cannot be negative");
        }
        catch (Exception e) {
        
        JOptionPane.showMessageDialog(null,e.getMessage() );
        return;
         }
        int availability = Integer.parseInt(quantityAvailablejTextField.getText());
        if(orderQunatity > availability)
        {
          JOptionPane.showMessageDialog(null,"Order Quantity more than available");  
        }
        int availQuantity = availability - orderQunatity;
        //Float totalPrice;
        for(Person p : clinicOrg.getPersonDirectory().getPersonList()){
          if(p instanceof Clinician){
              Clinician clinician = (Clinician)p;
              for(Vaccine v : clinician.getVaccineCatalog().getVaccineCatalog()){
                  if(v.getVaccineName().equals(vaccineName)){
                      v.setQuantity(availQuantity);
//                      float totalPrice = v.getPrice() * orderQunatity;
//                      totalPricejTextField.setText(String.valueOf(totalPrice));
//                      quantityAvailablejTextField.setText(String.valueOf(v.getQuantity()));
                  }
              }
            }
        }
        
        float totalPrice =  Float.parseFloat(pricePerDosejTextField.getText()) * orderQunatity;
        
//        Date dateOrdered = orderDatejDateChooser.getDate();
        String OrderDate = DateFormat.getDateInstance().format(d);
//        if(dateOrdered.before(d))
//            {
//                JOptionPane.showMessageDialog(null, "Please select a valid date");
//                return;
//            }
        
        
        PatientRequest pr = new PatientRequest();
        pr.setPatientName(patientName);
        pr.setPatientAddress(patientAddress);
        pr.setPatientContact(String.valueOf(patientContact));
        pr.setVaccineName(vaccineName);
        pr.setQuantity(orderQunatity);
        pr.setTotalPrice(totalPrice);
        pr.setInsuranceInfo(insuranceInfo);
        pr.setOrderDate(OrderDate);
        pr.setRequestID(pr.getPatientRequestID());
        pr.setPaymentStatus("Waiting");
        pr.setSender(account);
        pr.setStatus("Completed");
        pr.setOrderResult("Completed");
        pr.setLocation(clinicEnterprise.getLocation());
        pr.setEnterpriseType(clinicEnterprise.getEnterpriseType().getValue());
        pr.setEnterpriseName(clinicEnterprise.getName());
        
         Organization org = null;
        for(Network n : ecoSystem.getNetworkList()){
            boolean flag = false;
            for(Enterprise e: n.getEnterpriseDirectory().getEnterpriseList()){
//                System.out.println("enterprise: " +e);
//                if(request.getLocation().equals(e.getLocation())){
                    //System.out.println("hospitalEnterprise.getLocation(): " +hospitalEnterprise.getLocation());
//                    System.out.println("e.getLocation(): " +e.getLocation());
//                    System.out.println("beforeif enterpriseType: " +e.getEnterpriseType().getValue());
                if(insuranceInfo.equals("Insured")){    
                if(e.getEnterpriseType().getValue().equals("Insurance")){
                        System.out.println("enterpriseType: " +e.getEnterpriseType().getValue());
                        for(Organization o : e.getOrganizationDirectory().getOrganizationList()){
                            System.out.println("organization: " +o.getName());
                            
                            if(o instanceof InsuranceOrganization){
                            System.out.println("instance of Insurance Organization");
                            org = o;
                            flag = true;
                            break;
                            }
                        }
                    }
                }
                if(insuranceInfo.equals("Uninsured")){   
                    if(e.getEnterpriseType().getValue().equals("CDC")){
                        for(Organization o : e.getOrganizationDirectory().getOrganizationList()){
                           if(o instanceof CDCOrganization){
                            System.out.println("instance of CDC Organization");
                            org = o;
                            flag = true;
                            break;
                            } 
                        }
                    }
                }
                if(flag==true)
                {
                    break;
                }
        }
            if(org!=null){
                org.getWorkQueue().getWorkRequestList().add(pr);
                account.getWorkQueue().getWorkRequestList().add(pr);
                System.out.println("order request added to org");
        }
            
            JOptionPane.showMessageDialog(null, "submitted");
            return;
        } 
        
        
    }//GEN-LAST:event_submitjButtonActionPerformed

    private void vaccineNamejComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vaccineNamejComboBoxActionPerformed
        String vaccineName = (String)vaccineNamejComboBox.getSelectedItem();
        if(vaccineName!=null){
        boolean flag = false;
        for(Person p : clinicOrg.getPersonDirectory().getPersonList()){
          if(p instanceof Clinician){
              Clinician clinician = (Clinician)p;
              for(Vaccine v : clinician.getVaccineCatalog().getVaccineCatalog()){
                  if(v.getVaccineName().equals(vaccineName)){
                     quantityAvailablejTextField.setText(String.valueOf(v.getQuantity()));
                     flag = true;
                  }
                  if(flag==true){
                      break;
                  }
              }
          }
        }
        }
    }//GEN-LAST:event_vaccineNamejComboBoxActionPerformed

    private void orderQuantityjTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderQuantityjTextFieldActionPerformed
        
    }//GEN-LAST:event_orderQuantityjTextFieldActionPerformed

    private void pricePerDosejTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pricePerDosejTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pricePerDosejTextFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox insuranceInfojComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField orderQuantityjTextField;
    private javax.swing.JTextField patientAddressjTextField;
    private javax.swing.JTextField patientContactjTextField;
    private javax.swing.JTextField patientNamejTextField;
    private javax.swing.JTextField pricePerDosejTextField;
    private javax.swing.JTextField quantityAvailablejTextField;
    private javax.swing.JButton submitjButton;
    private javax.swing.JComboBox vaccineNamejComboBox;
    // End of variables declaration//GEN-END:variables
}
